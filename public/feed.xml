<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Devollox]]></title>
        <description><![CDATA[Devollox]]></description>
        <link>https://devollox.fun/</link>
        <image>
            <url>https://github.com/Devollox/Devollox-Website/blob/main/public/logo512.png</url>
            <title>Devollox</title>
            <link>https://devollox.fun/</link>
        </image>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 29 Apr 2024 18:50:26 GMT</lastBuildDate>
        <atom:link href="https://devollox.fun//feed.xml" rel="self" type="application/rss+xml"/>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[Next.js Theme]]></title>
            <description><![CDATA[<p>To change the theme on this site, I went through many libraries. First I wrote this script:</p>
<pre><code class="language-javascript">import React, { createContext, useEffect } from &quot;react&quot;;
import { useLocalStorage } from &quot;../hooks/useLocalStorage&quot;;

export const ThemeContext = createContext();

export const ThemeProvider = ({ children }) =&gt; {
  const [theme, setTheme] = useLocalStorage(&quot;theme&quot;, &quot;light&quot;);

  useEffect(() =&gt; {
    if (theme === &quot;dark&quot;) document.body.classList.add(&quot;dark&quot;);
    else document.body.classList.remove(&quot;dark&quot;);
  }, [theme]);

  return (
    &lt;ThemeContext.Provider value={[theme, setTheme]}&gt;
      {children}
    &lt;/ThemeContext.Provider&gt;
  );
};
</code></pre>
<p>But... This is not what I expected, on the old site where <code>React</code> was used, this code worked 100% and I expected the<br>same thing, but as we know <code>Next,js</code> is a northern framework, and it works very poorly with <code>HTML</code> and thatâ€™s why I went<br>to look for libraries.</p>
<p>I found <code>Next-Theme</code>. The code, of course, was really incomprehensible, and I began to study it. I needed to link it to<br>the CMDK.</p>
<pre><code class="language-javascript">import { ThemeProvider } from &#39;next-themes&#39;

function MyApp({ Component, pageProps }) {
  return (
    &lt;ThemeProvider defaultTheme=&quot;system&quot;&gt;
      &lt;Component {...pageProps} /&gt;
      &lt;Footer/&gt;
    &lt;/ThemeProvider&gt;
  )
}

export default MyApp
</code></pre>
<p>This is the only component that binds the <code>data-theme</code>, gives it some name, and we add the address itself to the css.</p>
<pre><code class="language-css">[data-theme=&#39;light&#39;] {
    --bg: #fff;
    --fg: #000;
    --gray: #888;
    --light-gray: #dedede;
    --lighter-gray: #f5f5f5;
    --lightest-gray: #fafafa;
    --article-color: #212121;
    --gray-bg: #00000;
    --kbd-bg: #fffff;
    --header-bg: rgba(255, 255, 255, 0.8);
    --gray-alpha: rgba(19, 20, 21, 0.5);
    --selection: rgba(0, 0, 0, 0.99);

    --token: #666;
    --comment: #999;
    --keyword: #000;
    --name: #333;
    --highlight: #eaeaea;
}
</code></pre>
<p>After studying the library, I made the following code, which I linked to a button in the CMDK.</p>
<pre><code class="language-javascript">const ThemeItems = () =&gt; {
  const { theme: activeTheme, themes, setTheme } = useTheme()
  const { setOpen } = useCommandData()

  return themes.map(theme =&gt; {
    if (theme === activeTheme) return null
    return (
      &lt;Item
        value={theme}
        key={`theme-${theme}`}
        callback={() =&gt; {
          setTheme(theme)
          setOpen(false)
        }}
      &gt;
        {theme}
      &lt;/Item&gt;
    )
  })
}

...
&lt;Item
  value=&quot;Themes&quot;
  icon={&lt;Sparkles /&gt;}
  keybind=&quot;t&quot;
  closeOnCallback={false}
/&gt;
...
</code></pre>
<p>The code works, I have no complaints, so to speak, there were problems with displaying the default theme, but this was<br>quickly fixed.</p>
]]></description>
            <link>https://devollox.fun/blog/better-nextjs-imports</link>
            <guid isPermaLink="false">https://devollox.fun/blog/better-nextjs-imports</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Tue, 26 Mar 2024 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[SVG Caching with <use>]]></title>
            <description><![CDATA[<p>I had an idea for caching SVG paths. Not the usual kind of async request caching of remote SVGs, but local re-use of DOM elements that have already rendered.</p>
<p>SVG&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use" target="_blank" rel="noopener noreferrer"><code>&lt;use&gt;</code></a> element allows re-use of an existing DOM element, without manually duplicating the node. It works like this:</p>
<pre><code class="language-html">&lt;!-- Add an id to the element --&gt;
&lt;svg&gt;
  &lt;circle id=&quot;circle&quot; cx=&quot;5&quot; r=&quot;5&quot; fill=&quot;black&quot; /&gt;
&lt;/svg&gt;

&lt;!-- Pass the id as href to &lt;use&gt; --&gt;
&lt;svg&gt;
  &lt;use href=&quot;#circle&quot; /&gt;
&lt;/svg&gt;

&lt;!-- The same SVG renders twice --&gt;
</code></pre>
<h2 id="setup">Setup</h2>
<p>When using an icon set like <a href="https://feathericons.com/" target="_blank" rel="noopener noreferrer">Feather</a> in React, I prefer to use a higher-order component (HOC) and a generic <code>Icon</code> component to render each icon with consistent properties. We&#39;ll use this HOC to demonstrate SVG caching:</p>
<pre><code class="language-jsx">import { memo } from &#39;react&#39;

const withIcon = (icon, opts) =&gt; {
  const Icon = props =&gt; {
    const { size = 24, color = &#39;currentColor&#39; } = props

    return (
      &lt;svg
        viewBox=&quot;0 0 24 24&quot;
        width={size}
        height={size}
        stroke=&quot;currentColor&quot;
        style={{
          color
        }}
        dangerouslySetInnerHTML={{
          __html: icon
        }}
      /&gt;
    )
  }

  return memo(Icon)
}

export default withIcon
</code></pre>
<p>Each icon is simply the SVG contents wrapped with the HOC:</p>
<pre><code class="language-jsx">const ArrowLeft = withIcon(&#39;&lt;path d=&quot;M21 12H3m0 0l6.146-6M3 12l6.146 6&quot; /&gt;&#39;)
</code></pre>
<h2 id="caching">Caching</h2>
<p>We&#39;ll use React context to add an icon cache. First, create a new context and the appropriate hook to access it:</p>
<pre><code class="language-jsx">export const IconCache = React.createContext(null)
export const useIconCache = () =&gt; React.useContext(IconCache)
</code></pre>
<p>Setup the provider at the application root. The cache will be a plain, empty object where each key is the icon string and each value is the cached id.</p>
<pre><code class="language-jsx">const App = () =&gt; (
  &lt;IconCache.Provider value={{}}&gt;{/* ... */}&lt;/IconCache.Provider&gt;
)
</code></pre>
<p>Inside of <code>Icon</code>, read the cache from context and check if this icon has a cached id. If not, generate the new id and add it to the cache:</p>
<pre><code class="language-jsx">const cache = useIconCache()

let cachedId = cache[icon]

if (!cachedId) {
  cachedId = `icon-` + hash(icon).toString(16)
  cache[icon] = cachedId
}
</code></pre>
<p>Generate a stable id by hashing the icon using the <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function" target="_blank" rel="noopener noreferrer">fnv1a</a> <a href="#footnote"><sup>1</sup></a> algorithm (commonly used in CSS-in-JS libraries) and then converting it to hexadecimal for a smaller string:</p>
<pre><code class="language-jsx">import hash from &#39;fnv1a&#39;
</code></pre>
<p>If we have a cached id, we can render the <code>&lt;use&gt;</code> tag instead of inserting the entire icon again. If this icon has not rendered before, wrap it in a group tag and attach the unique id.</p>
<pre><code class="language-jsx">return (
  &lt;svg
    viewBox=&quot;0 0 24 24&quot;
    width={size}
    height={size}
    stroke=&quot;currentColor&quot;
    style={{
      color
    }}
    dangerouslySetInnerHTML={{
      __html: cachedId
        ? `&lt;use href=&quot;#${cachedId}&quot; /&gt;`
        : `&lt;g id=&quot;${id}&quot;&gt;${icon}&lt;/g&gt;`
    }}
  /&gt;
)
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Here&#39;s our new <code>withIcon</code> HOC with caching:</p>
<pre><code class="language-jsx">import { memo } from &#39;react&#39;
import hash from &#39;fnv1a&#39;

export const IconCache = React.createContext({})
export const useIconCache = () =&gt; React.useContext(IconCache)

const withIcon = icon =&gt; {
  const Icon = props =&gt; {
    const { size = 24, color = &#39;currentColor&#39; } = props
    const cache = useIconCache()

    const cachedId = cache[icon]
    let id

    if (!cachedId) {
      id = &#39;icon-&#39; + hash(icon).toString(16)
      cache[icon] = id
    }

    return (
      &lt;svg
        viewBox=&quot;0 0 24 24&quot;
        width={size}
        height={size}
        stroke=&quot;currentColor&quot;
        style={{
          color
        }}
        dangerouslySetInnerHTML={{
          __html: cachedId
            ? `&lt;use href=&quot;#${cachedId}&quot; /&gt;`
            : `&lt;g id=&quot;${id}&quot;&gt;${icon}&lt;/g&gt;`
        }}
      /&gt;
    )
  }

  return memo(Icon)
}

export default withIcon
</code></pre>
<p>Rendering the same icon multiple times will reuse existing DOM elements, decreasing the size of your HTML:</p>
<pre><code class="language-jsx">/* React */

&lt;IconCache.Provider value={{}}&gt;
  &lt;ArrowLeft /&gt;
  &lt;ArrowLeft /&gt;
  &lt;ArrowLeft /&gt;
&lt;/IconCache.Provider&gt;

/* HTML Output:
  &lt;svg&gt;
    &lt;g id=&quot;icon-dacb5a47&quot;&gt;&lt;path d=&quot;M21 12H3m0 0l6.146-6M3 12l6.146 6&quot; /&gt;&lt;/g&gt;
  &lt;/svg&gt;

  &lt;svg&gt;
    &lt;use href=&quot;#icon-dacb5a47&quot; /&gt;
  &lt;/svg&gt;

  &lt;svg&gt;
    &lt;use href=&quot;#icon-dacb5a47&quot; /&gt;
  &lt;/svg&gt;
*/
</code></pre>
<p>In this example, the cached version is about 40% fewer characters!</p>
<p>You can still customize each icon, because the props apply to the outer svg element and don&#39;t involve the inner elements at all:</p>
<pre><code class="language-jsx">&lt;ArrowLeft /&gt;
&lt;ArrowLeft size={30} color=&quot;blue&quot; /&gt;
&lt;ArrowLeft size={50} color=&quot;red&quot; /&gt;
</code></pre>
<hr>
<p>Here&#39;s a <a href="https://svgcache.vercel.app" target="_blank" rel="noopener noreferrer">live demo</a> and the <a href="https://github.com/pacocoursey/svgcache" target="_blank" rel="noopener noreferrer">demo source code</a>.</p>
<div id="footnote"></div>

<ol>
<li>You don&#39;t have to use fnv1a, any stable id generation technique will work. Just make sure it&#39;s consistent between server and client to avoid hydration mismatch.</li>
</ol>
]]></description>
            <link>https://devollox.fun/blog/svg-caching-with-use</link>
            <guid isPermaLink="false">https://devollox.fun/blog/svg-caching-with-use</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Wed, 24 Jun 2020 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Better Next.js Imports1]]></title>
            <description><![CDATA[<p>Nine days after first writing this post, the Next.js team <a href="https://github.com/zeit/next.js/pull/11293" target="_blank" rel="noopener noreferrer">landed support for paths</a> in <code>tsconfig.json</code> and <code>jsconfig.json</code> by default! In Next.js 9.4 and onwards, you only need to specify a <code>baseURL</code> in your config file to support absolute imports:</p>
<pre><code class="language-json">// tsconfig.json or jsconfig.json
{
  compilerOptions: {
    &quot;baseURL&quot;: &quot;.&quot;
  }
}

// import Button from &#39;components/button&#39;
</code></pre>
<p>To use a custom prefix, add a <code>paths</code> configuration:</p>
<pre><code class="language-json">{
  compilerOptions: {
    &quot;baseURL&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@components/*&quot;: [&quot;components/*&quot;]
    }
  }
}

// import Button from &#39;@components/button&#39;
</code></pre>
<hr>
<p>Editors like VSCode automatically support the config in <code>jsconfig.json</code>, so Command+Click to jump to the source of a file will work as usual. <a href="https://github.com/tleunen/babel-plugin-module-resolver#editors-autocompletion" target="_blank" rel="noopener noreferrer">Atom and IntelliJ</a> also have support for rewrites.</p>
<hr>
<details>
  <summary>The original post, using a babel plugin.</summary>

<p>Relative import statements are a pain. To avoid <code>../</code> chains, improve code portability, and type less, I&#39;ve started using <a href="https://github.com/tleunen/babel-plugin-module-resolver" target="_blank" rel="noopener noreferrer"><code>babel-plugin-module-resolver</code></a> in my Next.js projects.</p>
<p>The goal is to transform verbose import statements like this:</p>
<pre><code class="language-js">import Button from &#39;../../../../components/button&#39;
</code></pre>
<p>into absolute import statements that work anywhere in your project:</p>
<pre><code class="language-js">import Button from &#39;@components/button&#39;
</code></pre>
<p>Let&#39;s do it. Install the babel plugin as a <code>devDependency</code>:</p>
<pre><code class="language-bash">$ yarn add babel-plugin-module-resolver -D
</code></pre>
<p>In the root of your Next.js project, create a <code>.babelrc.json</code> file and add the <code>module-resolver</code> plugin:</p>
<pre><code class="language-js">module.exports = {
  presets: [&#39;next/babel&#39;],
  plugins: [
    [
      &#39;module-resolver&#39;,
      {
        alias: {
          &#39;@components&#39;: &#39;./components&#39;
        }
      }
    ]
  ]
}
</code></pre>
<p>Create a <code>jsconfig.json</code> (or <code>tsconfig.json</code> if you&#39;re using TypeScript) and add the <code>paths</code> property:</p>
<pre><code class="language-json">{
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@components/*&quot;: [&quot;components/*&quot;]
    }
  }
}
</code></pre>
<p>Note that the syntax is slightly different than the babel config.</p>
<p>If you&#39;re using a mixed JS/TS codebase, you should include JS files in your <code>tsconfig.json</code>:</p>
<pre><code class="language-json">{
  &quot;include&quot;: [&quot;**/*.ts&quot;, &quot;**/*.tsx&quot;, &quot;**/*.js&quot;, &quot;**/*.jsx&quot;]
}
</code></pre>
<p>Now you can update your import statements to use the new syntax!</p>
</details>
]]></description>
            <link>https://devollox.fun/blog/better-nextjs-imports1</link>
            <guid isPermaLink="false">https://devollox.fun/blog/better-nextjs-imports1</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Sat, 14 Mar 2020 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Thoughtless]]></title>
            <description><![CDATA[<p>I have trouble falling asleep. Too many ideas and thoughts from a day with too little activity, I suspect. Writing down my thoughts helps me clear my mind.</p>
<p><a href="https://thoughtless.now.sh" target="_blank" rel="noopener noreferrer">Thoughtless</a> is an experiment, created on a sleepless night, to help me note my thoughts without interruption.</p>
<p>By making each typed word disappear, there is no overediting or obsessing over sentence structure. Record your raw thoughts â€” no going back.</p>
<p>When you finish, copy and paste your writing somewhere safe and sleep well.</p>
]]></description>
            <link>https://devollox.fun/blog/be-thoughtless</link>
            <guid isPermaLink="false">https://devollox.fun/blog/be-thoughtless</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Mon, 20 Jan 2020 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Write it down]]></title>
            <description><![CDATA[<p>My crappy superpower is solving difficult problems as I&#39;m falling asleep. Doesn&#39;t sound too bad, right? Here&#39;s the catch: I always convince myself I don&#39;t need to write the solution down.</p>
<p>It&#39;s 1:18 AM. I just figured it out. The answer is so simple, I can&#39;t believe it took me this long. Do I blind myself opening my phone to write it down? No, I can finally sleep now! There&#39;s no way I&#39;ll forget.</p>
<p>It&#39;s 8:32 AM. I can&#39;t believe I&#39;ve done this again.</p>
<hr>
<p>I have a new policy: <strong>write it down.</strong> Every single time. No matter if the idea comes to me in the shower, the middle of a dream, or in a conversation.</p>
<p>Most of my ideas are bad. But this way I&#39;ll never miss an opportunity.</p>
]]></description>
            <link>https://devollox.fun/blog/write-it-down</link>
            <guid isPermaLink="false">https://devollox.fun/blog/write-it-down</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Mon, 18 Nov 2019 21:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Understanding package.json]]></title>
            <description><![CDATA[<p>I began my Computer Science degree with an intensive introduction course in C. We used makefiles to compile and run each of our assignments.</p>
<p>When I started learning modern web development in early 2018, I had no idea what Node.js or NPM was. My idea of building website involved writing HTML, CSS, and occasionally including a <code>script</code> tag. A year or so later, I&#39;m finally comfortable with modern techniques.</p>
<p>A major source of confusion for me was <code>package.json</code>. In short, <code>package.json</code> is a makefile for the JavaScript environment, with some caveats.</p>
<h3 id="package-scripts">Package Scripts</h3>
<p>Package managers like Yarn and NPM also serve as script runners for JavaScript projects. Unlike makefiles, scripts in <code>package.json</code> run in a special environment.</p>
<p>Packages in <code>node_modules</code> that define an executable will have that executable appended to the environment PATH before running any scripts. This can be confusing. Let&#39;s see an example:</p>
<pre><code class="language-json">&quot;devDependencies&quot;: {
  &quot;eslint&quot;: &quot;1.0.0&quot;
},
&quot;scripts&quot;: {
  &quot;lint&quot;: &quot;eslint .&quot;
}
</code></pre>
<p>Running <code>yarn lint</code> will work correctly. However, just running <code>eslint .</code> from the command line will fail!<sup>1</sup> This was extremely confusing at first, did I have  ESLint installed or not?</p>
<p>The package script will work because Yarn recognizes that the ESLint dependency includes an executable, and appends it to the environment PATH when running any scripts.</p>
<p>This is a great advantage of the modular nature of the JavaScript ecosystem. You don&#39;t have to install any global scripts or clutter up your PATH to work with JavaScript projects, just <code>yarn install</code>.</p>
<hr>
<ol>
<li>Unless you have installed ESLint globally, which does add the executable to your PATH (<code>yarn global add eslint</code>)</li>
</ol>
]]></description>
            <link>https://devollox.fun/blog/understanding-package-json</link>
            <guid isPermaLink="false">https://devollox.fun/blog/understanding-package-json</guid>
            <dc:creator><![CDATA[Devollox]]></dc:creator>
            <pubDate>Sun, 10 Mar 2019 21:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>